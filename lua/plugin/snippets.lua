return {

    "L3MON4D3/LuaSnip",

    config = function()
        local ls = require("luasnip")
        local s = ls.snippet
        local t = ls.text_node

        ls.add_snippets("cpp", {
            s("notests", {
                t({
                    "#include \"bits/stdc++.h\"",
                    "#define _CRT_SECURE_NO_WARNINGS",
                    "#define ll long long",
                    "#define pii pair<int, int>",
                    "#define f first",
                    "#define s second",
                    "#define all(x) (x).begin(), (x).end()",
                    "",
                    "using namespace std;",
                    "",
                    "",
                    "signed main() {",
                    "\tios_base::sync_with_stdio(0);",
                    "\tcin.tie(0);",
                    "}"})
                })
            })

            ls.add_snippets("cpp", {
                s("yestests", {
                    t({
                        "#include \"bits/stdc++.h\"",
                        "#define _CRT_SECURE_NO_WARNINGS",
                        "#define ll long long",
                        "#define pii pair<int, int>",
                        "#define f first",
                        "#define s second",
                        "#define all(x) (x).begin(), (x).end()",
                        "",
                        "using namespace std;",
                        "",
                        "void solve(){",
                        "\t",
                        "}",
                        "",
                        "",
                        "signed main() {",
                        "\tios_base::sync_with_stdio(0);",
                        "\tcin.tie(0);",
                        "\tint t;",
                        "\tcin >> t;",
                        "\twhile(t--){",
                        "\t\tsolve();",
                        "\t}",
                        "}"})
                    })
                })

                ls.add_snippets("cpp", {
                    s("end_generand", {
                        t({
                            "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
                            "",
                            "int rand(int l, int r){",
                            "\treturn uniform_int_distribution<int>(l, r)(rng);",
                            "}"})
                        })
                    })

                    ls.add_snippets("cpp", {
                        s("enderbeat_labs", {
                            t({
                                "#include <iostream>",
                                "#include <windows.h>",
                                "",
                                "",
                                "using namespace std;",
                                "",
                                "int main(){",
                                "\tSetConsoleCP(1251);",
                                "\tSetConsoleOutputCP(1251);",
                                "}"})
                            })
                        })

                        ls.add_snippets("cpp", {
                            s("end_lazyseg", {
                                t({
                                    "template<typename T, typename U, typename MergeFunc, typename PropFunc, typename ApplyFunc>",
                                    "struct LazySegmentTree{",
                                    "\tint sz;",
                                    "\tT identity;",
                                    "\tU l_identity;",
                                    "\tMergeFunc mf;",
                                    "\tPropFunc pf;",
                                    "\tApplyFunc af;",
                                    "\tvector<T>t;",
                                    "\tvector<U>u;",
                                    "\tLazySegmentTree(int _sz, T _identity, U _l_indetity, MergeFunc _mf, PropFunc _pf, ApplyFunc _af):",
                                    "\tsz(_sz), identity(_identity), l_identity(_l_indetity), mf(_mf), pf(_pf), af(_af){",
                                    "\t\tsz = 1 << (__lg(sz - 1) + 1);",
                                    "\t\tt.assign(2 * sz, identity);",
                                    "\t\tu.assign(2 * sz, l_identity);",
                                    "\t}",
                                    "\tvoid build(const vector<T> &x){",
                                    "\t\tbuild(x, 1, 0, sz - 1);",
                                    "\t}",
                                    "\tvoid upd(int ql, int qr, U x){",
                                    "\t\tupd(ql, qr, x, 1, 0, sz - 1);",
                                    "\t}",
                                    "\tT qry(int ql, int qr){",
                                    "\t\treturn qry(ql, qr, 1, 0, sz - 1);",
                                    "\t}",
                                    "\tprivate:",
                                    "\tvoid build(const vector<T> &x, int v, int l, int r){",
                                    "\t\tif(l >= x.size()) return;",
                                    "\t\tif(l == r){",
                                    "\t\t\tt[v] = x[l];",
                                    "\t\t\treturn;",
                                    "\t\t}",
                                    "\t\tint m = (l + r) >> 1;",
                                    "\t\tbuild(x, v << 1, l, m);",
                                    "\t\tbuild(x, (v << 1) + 1, m + 1, r);",
                                    "\t\tt[v] = mf(t[v << 1], t[(v << 1) + 1]);",
                                    "\t}",
                                    "\tvoid upd(int ql, int qr, U x, int v, int l, int r){",
                                    "\t\tpush(v, l, r);",
                                    "\t\tif(ql > r || qr < l) return;",
                                    "\t\tif(ql <= l && r <= qr){",
                                    "\t\t\tu[v] = x;",
                                    "\t\t\tpush(v, l, r);",
                                    "\t\t\treturn;",
                                    "\t\t}",
                                    "\t\tint m = (l + r) >> 1;",
                                    "\t\tupd(ql, qr, x, v << 1, l, m);",
                                    "\t\tupd(ql, qr, x, (v << 1) + 1, m + 1, r);",
                                    "\t\tt[v] = mf(t[v << 1], t[(v << 1) + 1]);",
                                    "\t}",
                                    "\tT qry(int ql, int qr, int v, int l, int r){",
                                    "\t\tpush(v, l, r);",
                                    "\t\tif(ql > r || qr < l) return identity;",
                                    "\t\tif(ql <= l && r <= qr){",
                                    "\t\t\treturn t[v];",
                                    "\t\t}",
                                    "\t\tint m = (l + r) >> 1;",
                                    "\t\treturn mf(qry(ql, qr, v << 1, l, m), qry(ql, qr, (v << 1) + 1, m + 1, r));",
                                    "\t}",
                                    "\tvoid push(int v, int l, int r){",
                                    "\t\t//basic",
                                    "\t\tif(u[v] == l_identity) return;",
                                    "\t\tt[v] = af(t[v], u[v], l, r);",
                                    "\t\tif(l != r) for(int i = 0; i < 2; i++) u[v * 2 + i] = pf(u[v * 2 + i], u[v]);",
                                    "\t\tu[v] = l_identity;",
                                    "\t}",
                                    "};",
                                    ""})
                                })
                            })

                            ls.add_snippets("cpp", {
                                s("end_poly_hash", {
                                    t({
                                        "// good primes: 985205219 999953723 999998687 980000843 1000000007 1000017563",
                                        "const int mod_count = 2;",
                                        "const array<int, mod_count> mods = {985205219, 1000000007};",
                                        "mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());",
                                        "const int base = uniform_int_distribution<int>(1e6, *min_element(mods.begin(), mods.end()) - 1)(rng);",
                                        "struct string_hash{",
                                        "\tvector<array<int, mod_count>> hashes, pws;",
                                        "\tstring_hash(const string& s){",
                                        "\t\thashes.resize(s.size() + 1);",
                                        "\t\tpws.resize(s.size() + 1);",
                                        "\t\tfor(int i = 0; i < mod_count; i++) pws[0][i] = 1;",
                                        "\t\tfor(int i = 0; i < s.size(); i++){",
                                        "\t\t\tfor(int j = 0; j < mod_count; j++){",
                                        "\t\t\t\tpws[i + 1][j] = (pws[i][j] * base) % mods[j];",
                                        "\t\t\t\thashes[i + 1][j] = (hashes[i][j] * base + s[i]) % mods[j];",
                                        "\t\t\t}",
                                        "\t\t}",
                                        "\t}",
                                        "\tarray<int, mod_count> substr(int i, int len){",
                                        "\t\tarray<int, mod_count> res;",
                                        "\t\tfor(int j = 0; j < mod_count; j++){",
                                        "\t\t\tres[j] = ((hashes[i + len][j] - hashes[i][j] * pws[len][j]) % mods[j] + mods[j]) % mods[j];",
                                        "\t\t}",
                                        "\t\treturn res;",
                                        "\t}",
                                        "};"})
                                    })
                                })

                                ls.add_snippets("cpp", {
                                    s("end_syffix_array", {
                                        t({
                                            "vector<int>suffix_array(const string &s){",
                                            "\tint n = s.size();",
                                            "\tvector<int> c(n);",
                                            "\tfor(int i = 0; i < n; i++){",
                                            "\t\tc[i] = +s[i];",
                                            "\t}",
                                            "\tvector<pair<pii, int>>t(n);",
                                            "\tfor(int i = 1; i < n; i <<= 1){",
                                            "\t\tfor(int j = 0; j < n; j++){",
                                            "\t\t\tt[j] = {{c[j], c[(j + i) % n]}, j};",
                                            "\t\t}",
                                            "\t\tsort(t.begin(), t.end());",
                                            "\t\tfor(int cnt = 0, j = 0; j < n; j++){",
                                            "\t\t\tif(j) cnt += t[j - 1].f != t[j].f;",
                                            "\t\t\tc[t[j].s] = cnt;",
                                            "\t\t}",
                                            "\t}",
                                            "\tvector<int>ans(n);",
                                            "\tfor(int i = 0; i < n; i++){",
                                            "\t\tans[c[i]] = i;",
                                            "\t}",
                                            "\treturn ans;",
                                            "}",
                                            ""})
                                        })
                                    })

                                    ls.add_snippets("cpp", {
                                        s("end_binary_search", {
                                            t({
                                                "auto pred = [&](int m){",
                                                "\t// have to form 1111110000000",
                                                "};",
                                                "//l = last one of predicate, r = first zero",
                                                "int lo = -1, hi = n - 1;",
                                                "while(lo + 1 < hi){",
                                                "\tint m = (lo + hi) / 2;",
                                                "\tif(pred(m)){",
                                                "\t\tlo = m;",
                                                "\t}",
                                                "\telse{",
                                                "\t\thi = m;",
                                                "\t}",
                                                "}",
                                                "pred(hi);"})
                                            })
                                        })

                                        ls.add_snippets("cpp", {
                                            s("end_sparse_table", {
                                                t({
                                                    "template <typename T, typename MergeFunc>",
                                                    "struct SparseTable{",
                                                    "\tMergeFunc func;",
                                                    "\tvector<vector<T>>sparse;",
                                                    "\tvector<int>logs;",
                                                    "\tSparseTable(const vector<T>& a, MergeFunc _func):",
                                                    "\tfunc(_func){",
                                                    "\t\tsparse.push_back(a);",
                                                    "\t\tint n = a.size();",
                                                    "\t\tlogs.resize(n + 1);",
                                                    "\t\tfor(int i = 2; i <= n; i++){",
                                                    "\t\t\tlogs[i] = logs[i - 1] + ((i & (i - 1)) == 0);",
                                                    "\t\t}",
                                                    "\t\tfor(int j = 1; (1 << j) <= n; j++){",
                                                    "\t\t\tsparse.push_back(vector<T>(n - (1 << j) + 1));",
                                                    "\t\t\tfor(int i = 0; i < sparse[j].size(); i++){",
                                                    "\t\t\t\tsparse[j][i] = func(sparse[j - 1][i], sparse[j - 1][i + (1 << (j - 1))]);",
                                                    "\t\t\t}",
                                                    "\t\t}",
                                                    "\t}",
                                                    "\tT qry(int l, int r){",
                                                    "\t\tint k = logs[r - l + 1];",
                                                    "\t\treturn func(sparse[k][l], sparse[k][r - (1 << k) + 1]);",
                                                    "\t}",
                                                    "};"})
                                                })
                                            })

                                            ls.add_snippets("cpp", {
                                                s("end_seg_tree", {
                                                    t({
                                                        "template<typename T, typename mFunc>",
                                                        "struct SegmentTree {",
                                                        "\tT identity;",
                                                        "\tmFunc comb;",
                                                        "\tvector<T>t;",
                                                        "\tint sz;",
                                                        "\tSegmentTree(int _sz, T _identity, mFunc func) :",
                                                        "\t\tidentity(_identity), comb(func), sz(_sz) {",
                                                        "\t\tt.assign(2 * sz, identity);",
                                                        "\t}",
                                                        "\tvoid build(vector<T>& a) {",
                                                        "\t\tsz = a.size();",
                                                        "\t\tt.assign(2 * sz, identity);",
                                                        "\t\tfor (int i = 0; i < sz; i++) {",
                                                        "\t\t\tt[i + sz] = a[i];",
                                                        "\t\t}",
                                                        "\t\tfor (int i = sz - 1; i > 0; i--) {",
                                                        "\t\t\tt[i] = comb(t[i * 2], t[i * 2 + 1]);",
                                                        "\t\t}",
                                                        "\t}",
                                                        "\tT qry(int l, int r) {",
                                                        "\t\tl += sz;",
                                                        "\t\tr += sz + 1;",
                                                        "\t\tT res = identity;",
                                                        "\t\twhile (l < r) {",
                                                        "\t\t\tif (l & 1) res = comb(t[l++], res);",
                                                        "\t\t\tif (r & 1) res = comb(res, t[--r]);",
                                                        "\t\t\tr /= 2;",
                                                        "\t\t\tl /= 2;",
                                                        "\t\t}",
                                                        "\t\treturn res;",
                                                        "\t}",
                                                        " ",
                                                        "\tvoid upd(int v, T x) {",
                                                        "\t\tv += sz;",
                                                        "\t\tt[v] = x;",
                                                        "\t\tfor (v /= 2; v; v /= 2) {",
                                                        "\t\t\tt[v] = comb(t[v * 2], t[v * 2 + 1]);",
                                                        "\t\t}",
                                                        "\t}",
                                                        "};"})
                                                    })
                                                })

                                                ls.add_snippets("cpp", {
                                                    s("end_link_cut_tree", {
                                                        t({
                                                            "class LinkCutTree {",
                                                            "private:",
                                                            "\tstruct Vertex {",
                                                            "\t\tint left, right, parent;",
                                                            "\t\tbool revert;",
                                                            "\t\tint size;",
                                                            "\t\tint64_t value, result, delta;",
                                                            "",
                                                            "\t\tVertex()",
                                                            "\t\t\t: left(-1), right(-1), parent(-1), revert()",
                                                            "\t\t\t, size(1), value(), result(), delta() {}",
                                                            "\t};",
                                                            "",
                                                            "\tvector<Vertex> t;",
                                                            "",
                                                            "\tbool isRoot(int x) const {",
                                                            "\t\tint p = t[x].parent;",
                                                            "\t\treturn p == -1 || (t[p].left != x && t[p].right != x);",
                                                            "\t}",
                                                            "",
                                                            "\tint64_t getValue(int x) const {",
                                                            "\t\treturn t[x].value + t[x].delta;",
                                                            "\t}",
                                                            "",
                                                            "\tint64_t getResult(int x) const {",
                                                            "\t\treturn t[x].result + t[x].delta * t[x].size;",
                                                            "\t}",
                                                            "",
                                                            "\tvoid push(int x) {",
                                                            "\t\tif (t[x].revert) {",
                                                            "\t\t\tif (t[x].left != -1)",
                                                            "\t\t\t\tt[t[x].left].revert = !t[t[x].left].revert;",
                                                            "\t\t\tif (t[x].right != -1)",
                                                            "\t\t\t\tt[t[x].right].revert = !t[t[x].right].revert;",
                                                            "\t\t\tswap(t[x].left, t[x].right);",
                                                            "\t\t\tt[x].revert = false;",
                                                            "\t\t}",
                                                            "\t\tt[x].value = getValue(x);",
                                                            "\t\tt[x].result = getResult(x);",
                                                            "\t\tif (t[x].left != -1)",
                                                            "\t\t\tt[t[x].left].delta += t[x].delta;",
                                                            "\t\tif (t[x].right != -1)",
                                                            "\t\t\tt[t[x].right].delta += t[x].delta;",
                                                            "\t\tt[x].delta = 0;",
                                                            "\t}",
                                                            "",
                                                            "\tvoid keep(int x) {",
                                                            "\t\tt[x].size = 1;",
                                                            "\t\tt[x].result = getValue(x);",
                                                            "\t\tif (t[x].left != -1) {",
                                                            "\t\t\tt[x].size += t[t[x].left].size;",
                                                            "\t\t\tt[x].result += getResult(t[x].left);",
                                                            "\t\t}",
                                                            "\t\tif (t[x].right != -1) {",
                                                            "\t\t\tt[x].size += t[t[x].right].size;",
                                                            "\t\t\tt[x].result += getResult(t[x].right);",
                                                            "\t\t}",
                                                            "\t}",
                                                            "",
                                                            "\tvoid rotate(int x) {",
                                                            "\t\tint p = t[x].parent;",
                                                            "\t\tint g = t[p].parent;",
                                                            "\t\tpush(p), push(x);",
                                                            "\t\tif (g != -1) {",
                                                            "\t\t\tif (t[g].left == p)",
                                                            "\t\t\t\tt[g].left = x;",
                                                            "\t\t\telse if (t[g].right == p)",
                                                            "\t\t\t\tt[g].right = x;",
                                                            "\t\t}",
                                                            "\t\tt[x].parent = g;",
                                                            "\t\tif (t[p].left == x) {",
                                                            "\t\t\tt[p].left = t[x].right;",
                                                            "\t\t\tif (t[p].left != -1)",
                                                            "\t\t\t\tt[t[p].left].parent = p;",
                                                            "\t\t\tt[x].right = p;",
                                                            "\t\t} else {",
                                                            "\t\t\tt[p].right = t[x].left;",
                                                            "\t\t\tif (t[p].right != -1)",
                                                            "\t\t\t\tt[t[p].right].parent = p;",
                                                            "\t\t\tt[x].left = p;",
                                                            "\t\t}",
                                                            "\t\tt[p].parent = x;",
                                                            "\t\tkeep(p), keep(x);",
                                                            "\t}",
                                                            "",
                                                            "\tvoid splay(int x) {",
                                                            "\t\twhile (!isRoot(x)) {",
                                                            "\t\t\tint p = t[x].parent;",
                                                            "\t\t\tif (!isRoot(p)) {",
                                                            "\t\t\t\tint g = t[p].parent;",
                                                            "\t\t\t\tbool zigzig = (x == t[p].left) == (p == t[g].left);",
                                                            "\t\t\t\trotate(zigzig ? p : x);",
                                                            "\t\t\t}",
                                                            "\t\t\trotate(x);",
                                                            "\t\t}",
                                                            "\t\tpush(x);",
                                                            "\t}",
                                                            "",
                                                            "\tint expose(int x) {",
                                                            "\t\tint c = -1;",
                                                            "\t\tfor (int y = x; y != -1; y = t[y].parent) {",
                                                            "\t\t\tsplay(y);",
                                                            "\t\t\tt[y].right = c;",
                                                            "\t\t\tkeep(y);",
                                                            "\t\t\tc = y;",
                                                            "\t\t}",
                                                            "\t\tsplay(x);",
                                                            "\t\treturn c;",
                                                            "\t}",
                                                            "",
                                                            "public:",
                                                            "\tLinkCutTree(int n) : t(n) {}",
                                                            "\t// reroots the tree to x",
                                                            "\tvoid evert(int x) {",
                                                            "\t\texpose(x);",
                                                            "\t\tt[x].revert = !t[x].revert;",
                                                            "\t}",
                                                            "",
                                                            "\t// finds a root of tree where x lies",
                                                            "\tint root(int x) {",
                                                            "\t\texpose(x);",
                                                            "\t\twhile (t[x].left != -1) {",
                                                            "\t\t\tx = t[x].left;",
                                                            "\t\t\tpush(x);",
                                                            "\t\t}",
                                                            "\t\texpose(x);",
                                                            "\t\treturn x;",
                                                            "\t}",
                                                            "",
                                                            "\t//finds a parent of x",
                                                            "\tint parent(int x) {",
                                                            "\t\texpose(x);",
                                                            "\t\tif (t[x].left == -1)",
                                                            "\t\t\treturn -1;",
                                                            "\t\tx = t[x].left;",
                                                            "\t\tpush(x);",
                                                            "\t\twhile (t[x].right != -1) {",
                                                            "\t\t\tx = t[x].right;",
                                                            "\t\t\tpush(x);",
                                                            "\t\t}",
                                                            "\t\treturn x;",
                                                            "\t}",
                                                            "",
                                                            "\t// finds if there's a path between x and y",
                                                            "\tbool path(int x, int y) {",
                                                            "\t\tif (x == y)",
                                                            "\t\t\treturn true;",
                                                            "\t\texpose(y), expose(x);",
                                                            "\t\treturn t[y].parent != -1;",
                                                            "\t}",
                                                            "",
                                                            "\t// adds an edge from x to y (y becomes parent of x)",
                                                            "\tvoid link(int x, int y) {",
                                                            "\t\tif (path(x, y))",
                                                            "\t\t\treturn;",
                                                            "\t\tevert(x);",
                                                            "\t\tt[x].parent = y;",
                                                            "\t}",
                                                            "",
                                                            "\t// deletes edge between x and it's parent",
                                                            "\tvoid cut(int x) {",
                                                            "\t\texpose(x);",
                                                            "\t\tif (t[x].left == -1)",
                                                            "\t\t\treturn;",
                                                            "\t\tt[t[x].left].parent = -1;",
                                                            "\t\tt[x].left = -1;",
                                                            "\t}",
                                                            "",
                                                            "\t// find lca between x and y",
                                                            "\tint lca(int x, int y) {",
                                                            "\t\tif (!path(x, y))",
                                                            "\t\t\treturn -1;",
                                                            "\t\texpose(x);",
                                                            "\t\treturn expose(y);",
                                                            "\t}",
                                                            "",
                                                            "\t// finds distance from root to x",
                                                            "\tint depth(int x) {",
                                                            "\t\texpose(x);",
                                                            "\t\tif (t[x].left == -1)",
                                                            "\t\t\treturn 0;",
                                                            "\t\treturn t[t[x].left].size;",
                                                            "\t}",
                                                            "",
                                                            "\t// finds distance from x to y",
                                                            "\tint distance(int x, int y) {",
                                                            "\t\tint l = lca(x, y);",
                                                            "\t\tif (l == -1)",
                                                            "\t\t\treturn -1;",
                                                            "\t\treturn depth(y) + depth(x) - depth(l) * 2;",
                                                            "\t}",
                                                            "",
                                                            "\t// finds sum on path from x to y",
                                                            "\tint64_t query(int x, int y) {",
                                                            "\t\tif (!path(x, y))",
                                                            "\t\t\treturn 0;",
                                                            "\t\tevert(x), expose(y);",
                                                            "\t\treturn t[y].result;",
                                                            "\t}",
                                                            "",
                                                            "\t// adds value on path from x to y",
                                                            "\tvoid update(int x, int y, int64_t value) {",
                                                            "\t\tif (!path(x, y))",
                                                            "\t\t\treturn;",
                                                            "\t\tevert(x), expose(y);",
                                                            "\t\tt[y].delta += value;",
                                                            "\t}",
                                                            "};"})
                                                        })
                                                    })

                                                    ls.add_snippets("cpp", {
                                                        s("end_debug", {
                                                            t({
                                                                "string to_string(string s){",
                                                                "\treturn '\"' + s + '\"';",
                                                                "}",
                                                                "",
                                                                "string to_string(const char* c){",
                                                                "\treturn \"\\\"\" + string(c) + \"\\\"\";",
                                                                "}",
                                                                "",
                                                                "string to_string(bool b){",
                                                                "\treturn (b ? \"true\": \"false\");",
                                                                "}",
                                                                "",
                                                                "template <typename T, typename U = void>",
                                                                "struct is_iterable {",
                                                                "\tstatic constexpr bool value = false;",
                                                                "};",
                                                                "",
                                                                "template <typename T>",
                                                                "struct is_iterable<T, typename std::void_t<decltype(declval<T>().begin())>> {",
                                                                "\tstatic constexpr bool value = true;",
                                                                "};",
                                                                "",
                                                                "template<typename T>",
                                                                "string to_string(T x){",
                                                                "\tstring res = \"\";",
                                                                "\tif constexpr (is_iterable<T>::value){",
                                                                "\t\tres += \"{\";",
                                                                "\t\tfor(auto y: x){",
                                                                "\t\t\tres += to_string(y) + ' ';",
                                                                "\t\t}",
                                                                "\t\tif(res.size() == 1) res += '}';",
                                                                "\t\tres.back() = '}';",
                                                                "\t}",
                                                                "\telse{",
                                                                "\t\tres += \"(\";",
                                                                "\t\tapply([&res](auto... y) {",
                                                                "\t\t\t((res += to_string(y) + ' '), ...);",
                                                                "\t\t\t}, x);",
                                                                "\t\tif(res.size() == 1) res += ')';",
                                                                "\t\tres.back() = ')';",
                                                                "\t}",
                                                                "\treturn res;",
                                                                "}",
                                                                "",
                                                                "void debugln() { cerr << endl; }",
                                                                "",
                                                                "template<typename T, typename... other>",
                                                                "void debugln(T first_element, other... other_elements){",
                                                                "\tcerr << \" \" << to_string(first_element);",
                                                                "\tdebugln(other_elements...);",
                                                                "}",
                                                                "",
                                                                "#ifdef _DEBUG",
                                                                "\t#define dbg(...) cerr << #__VA_ARGS__ << \":\", debugln(__VA_ARGS__);",
                                                                "#else",
                                                                "\t#define dbg(...) 0;",
                                                                "#endif"})
                                                            })
                                                        })

                                                        ls.add_snippets("cpp", {
                                                            s("end_fenwick", {
                                                                t({
                                                                    "template<typename T>",
                                                                    "struct FenwickTree{",
                                                                    "\tvector<T>t;",
                                                                    "\tT identity;",
                                                                    "\tFenwickTree(int sz, T _identity){",
                                                                    "\t\tt.resize(sz * 2);",
                                                                    "\t\tidentity = _identity",
                                                                    "\t};",
                                                                    "\tvoid upd(int i, T x) {",
                                                                    "\t\tfor (++i; i <= (int)t.size(); i += i & -i) t[i - 1] += x;",
                                                                    "\t}",
                                                                    "\t",
                                                                    "\tT qry(int r) {",
                                                                    "\t\tT res = identity;",
                                                                    "\t\tfor (; r; r -= r & -r) res += t[r - 1];",
                                                                    "\t\treturn res;",
                                                                    "\t}",
                                                                    "\t",
                                                                    "\tT qry(int l, int r) {",
                                                                    "\t\treturn qry(r + 1, t) - qry(l, t);",
                                                                    "\t}",
                                                                    "\t",
                                                                    "\tint lower_bound(T sum) {",
                                                                    "\t\tint pos = 0;",
                                                                    "\t\tfor (int pw = 1 << 25; pw; pw >>= 1) {",
                                                                    "\t\t\tint npos = pos + pw;",
                                                                    "\t\t\tif (npos <= t.size() && t[npos - 1] < sum) {",
                                                                    "\t\t\t\tpos = npos;",
                                                                    "\t\t\t\tsum -= t[npos - 1];",
                                                                    "\t\t\t}",
                                                                    "\t\t}",
                                                                    "\t\treturn pos;",
                                                                    "\t}",
                                                                    "};"})
                                                                })
                                                            })


                                                        end
                                                    }
